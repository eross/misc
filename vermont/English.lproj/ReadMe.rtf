{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica-BoldOblique;\f2\fswiss\fcharset77 Helvetica;
\f3\froman\fcharset77 Times-Roman;\f4\froman\fcharset77 Times-Italic;}
{\colortbl;\red255\green255\blue255;}
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs48 \cf0 Vermont Recipes\

\fs28 \
Based on 
\f1\i Cocoa Recipes for Mac OS X\'d1The Vermont Recipes
\f0\i0 \
By Bill Cheeseman, Quechee Software, Quechee, Vermont\
Peachpit Press 2002
\fs36 \
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f2\b0\fs24 \cf0 \
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\fs20 \cf0 Copyright \'a9 2000-2002 Bill Cheeseman. All rights reserved.
\fs24 \
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f3\fs28 \cf0 Vermont Recipes is an application written according to the recipes in 
\f4\i Cocoa Recipes for Mac OS X\'d1The Vermont Recipes
\f3\i0 , Peachpit Press, www.peachpit.com. It is written in the Objective-C programming language using Apple Computer's Cocoa frameworks for Mac OS X.\
\
Vermont Recipes demonstrates how a variety of user controls and other features work in a typical Mac OS X application. You may freely distribute it so long as you don't alter it in any way.\
\
If you would like to learn how to write a Cocoa application of your own with any of the features you see here, buy the book! The first five recipes are available online at the Stepwise Web site, www.stepwise.com. You can also download all of the application's project files, including full source code, from the Stepwise Web site.\
\
Vermont Recipes will run under Mac OS X 10.1, but some of its features require Mac OS X 10.2 (Jaguar), released by Apple Computer on August 24, 2002. For example, you can't save or open documents under Mac OS X 10.1 because the application uses keyed archiving, a new Cocoa technology introduced in Mac OS X 10.2. The book includes information about how to program many new Cocoa technologies like keyed archiving.\
\
The focus of the book is a multidocument, multiwindow application built using the Cocoa AppKit and Foundation frameworks. Here are summaries of the topics covered in the first few recipes:\
\
Recipe 1: A Multi-Document, Multi-Window Application\
	\'a5 Using Project Builder to create a new project\
	\'a5 Using Interface Builder to design and build a graphical user interface\
	   with user controls, classes, outlets, actions, and connections\
	\'a5 Coding the basic document and window controller classes\
	\'a5 Setting up a tab view\
	\'a5 Implementing a checkbox user control, a simple data structure for it,\
	  data storage and retrieval in XML format, multiple undo and redo, \
	  and revert to saved\
	\'a5 Adding application and document icons\
	\'a5 Customizing the menu bar\
	\'a5 Debugging and building the application for deployment\
\
Recipe 2: User Controls\'d1Buttons\
	\'a5 Updating the Application Settings, resources, and source files for a new \
	  version of an application\
	\'a5 Implementing a variety of Cocoa buttons, including checkboxes, radio \
	  buttons, pop-up and command pull-down menus, and bevel buttons, many \
	  of which interoperate with one another\
           	\'a5 Implementing a Cocoa category to enhance the functionality of a built-in \
	  Cocoa class\
\
Recipe 3: User controls\'d1Sliders\
	\'a5 Implementing a variety of sliders, both vertical and horizontal, continuous\
        	   and discrete, with and without tick marks\
                  \'a5 Interconnecting sliders with a text box and buttons, with complete\
                     interaction among them\
\
Recipe 4: User controls\'d1Text fields\
	\'a5 Implementing simple text fields\
	\'a5 Setting up a key loop to tab among a window's user controls\
\
Recipe 5: Text Field Extras\'d1Alert Sheets\
                  \'a5 Presenting a complex, interactive document-modal sheet to deal with an \
	  invalid text field entry\
                  \'a5 Presenting a generic document-modal sheet to prevent deletions from a \
	  text field\
                  \'a5 Internationalizing a sheet\
                  \'a5 Human interface considerations relating to invalid text fields\
\
Recipe 6: Text Field Extras\'d1Formatters\
	\'a5 Writing custom formatters by subclassing NSNumberFormatter or NSFormatter\
	\'a5 Filtering a user's typing on the fly to prevent entry of illegal characters\
	\'a5 Formatting a user's typing by adding separator characters on the fly\
	\'a5 Memory management for instance variables that hold value objects\
	\'a5 Setting the tab order among text fields in a window\
	\'a5 Obtaining localized user default values from NSUserDefaults\
	\'a5 Creating and using a custom character set for membership testing\
	\'a5 Creating and using a scanner to remove unwanted characters from a string\
	\'a5 Recognizing a control character or function key typed on the keyboard\

\f4\i \

\f3\i0 Thanks go to Scott Anguish and the Stepwise editorial team for reviewing and commenting on the code of these first few recipes. Any errors are solely the responsibility of Bill Cheeseman.\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\fs24 \cf0 November 12 2002\
Bill Cheeseman\
Quechee Software\
www.quecheesoftware.com}